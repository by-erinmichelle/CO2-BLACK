using System;
using System.Collections.Generic;

namespace UnityEngine.XR.iOS
{
	public class TeamARHitTest : MonoBehaviour
	{
		public Transform m_HitTransform;
		public float maxRayDistance = 30.0f;
		public LayerMask collisionLayer = 1 << 10;  //ARKitPlane layer
		public float findingSquareDist = 0.5f;

		public GameObject BlueFocusSquare;
		public GameObject FocusedSquare;
		public GameObject WholeLamp;
		public GameObject TapToText;

		public GameObject buildingFact;
		public GameObject buildingFact_trans;

		public GameObject cflBulb;
		public GameObject replaceBulb;


		public GameObject lampNewCollider;

		public Material lampShade;

		public GameObject ScanningDots;

		public GameObject planePrefab;


		Collider m_Collider;


		bool HitTestWithResultType (ARPoint point, ARHitTestResultType resultTypes)
		{
			List<ARHitTestResult> hitResults = UnityARSessionNativeInterface.GetARSessionNativeInterface ().HitTest (point, resultTypes);

			if (hitResults.Count > 0) {
				
				ScanningDots.SetActive(false);

				if (!cflBulb.activeInHierarchy) {
					//works as long as theres only one condition?
					buildingFact.SetActive (true);
					buildingFact_trans.SetActive (true);
				} 

				BlueFocusSquare.SetActive (false);

				FocusedSquare.SetActive (false);
				Destroy (FocusedSquare);
				Destroy (BlueFocusSquare);
				Destroy (TapToText);


				foreach (var hitResult in hitResults) {
					Debug.Log ("Got hit!");
					m_HitTransform.position = UnityARMatrixOps.GetPosition (hitResult.worldTransform);
					m_HitTransform.rotation = UnityARMatrixOps.GetRotation (hitResult.worldTransform);
					Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));
					return true;
				}
			}

			WholeLamp.transform.DetachChildren ();
			lampNewCollider.GetComponent<Collider>().enabled = true;
			return false;
		}

		// Update is called once per frame
		void Update () {

			m_Collider = GetComponent<Collider>();
			Vector3 center = new Vector3(Screen.width/2, Screen.height/2, findingSquareDist);

//			#if UNITY_EDITOR   //we will only use this script on the editor side, though there is nothing that would prevent it from working on device
//			if (Input.GetMouseButtonDown (0)) {
//			Ray ray = Camera.main.ScreenPointToRay (center);
//			RaycastHit hit;
//
//			//we'll try to hit one of the plane collider gameobjects that were generated by the plugin
//			//effectively similar to calling HitTest with ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent
//			if (Physics.Raycast (ray, out hit, maxRayDistance, collisionLayer)) {
//			//we're going to get the position from the contact point
//			m_HitTransform.position = hit.point;
//			Debug.Log (string.Format ("x:{0:0.######} y:{1:0.######} z:{2:0.######}", m_HitTransform.position.x, m_HitTransform.position.y, m_HitTransform.position.z));
//
//			//and the rotation from the transform of the plane collider
//			m_HitTransform.rotation = hit.transform.rotation;
//			}
//			}

			if (Input.touchCount > 0 && m_HitTransform != null)
			{
				var touch = Input.GetTouch(0);
				if (touch.phase == TouchPhase.Began || touch.phase == TouchPhase.Moved)
				{
					var screenPosition = Camera.main.ScreenToViewportPoint(center);
					ARPoint point = new ARPoint {
						x = screenPosition.x,
						y = screenPosition.y
					};

					// prioritize reults types
					ARHitTestResultType[] resultTypes = {
						ARHitTestResultType.ARHitTestResultTypeExistingPlaneUsingExtent, 
//						// if you want to use infinite planes use this:
//						//ARHitTestResultType.ARHitTestResultTypeExistingPlane,
//						ARHitTestResultType.ARHitTestResultTypeHorizontalPlane, 
//						ARHitTestResultType.ARHitTestResultTypeFeaturePoint
					}; 

					foreach (ARHitTestResultType resultType in resultTypes)
					{
						if (HitTestWithResultType (point, resultType))
						{
							return;
						}
					}
				}
			}

		}


	}
}
